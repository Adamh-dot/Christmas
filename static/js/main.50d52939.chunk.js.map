{"version":3,"sources":["resources/hat.svg","Components/Card/Card.js","resources/train.png","resources/soldier.png","resources/tricycle.png","resources/football.png","resources/bear.png","resources/blocks.png","Board.js","resources/Snow background.png","Components/Game/Game.js","Components/Game/SantaAppGame.js","index.js"],"names":["Card","id","isFlipped","handleClick","cardNumber","presentImg","flipSpeedBackToFront","flipSpeedFrontToBack","className","onClick","src","Board","props","useState","Array","fill","setIsFlipped","shuffledCard","setShuffledCard","clickCount","setClickCount","prevSelectedCard","setPrevSelectedCard","prevCardId","setPrevCardId","presentImgs","train","soldier","tricycle","football","bear","blocks","useEffect","sortedCards","sort","Math","random","event","preventDefault","cardId","target","newFlipps","slice","newCard","isCardMatch","card1","card2","card1Id","card2Id","hideCard","setTimeout","flipBack","every","item","elfName","map","index","Game","snow","Button","type","React","Component","SantaAppGame","newGame","setNewGame","setElfName","startGame","setStartGame","e","onSubmit","alert","onChange","value","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.50d52939.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/hat.31d6cfe0.svg\";","import React from 'react';\r\nimport ReactCardFlip from \"react-card-flip\";\r\n\r\nconst Card = ({ id, isFlipped, handleClick, cardNumber, presentImg }) => (\r\n    <ReactCardFlip isFlipped={isFlipped} flipSpeedBackToFront={1} flipSpeedFrontToBack={1} >\r\n        <div id={id} className={`card card-front ${cardNumber !== -1 ? \"\" : \"hide-card\"}`} onClick={handleClick} key=\"front\">\r\n            <div className=\"image-holder\"></div>\r\n        </div>\r\n        <div id={id} className={`card card-back ${cardNumber !== -1 ? \"\" : \"hide-card\"}`} onClick={handleClick} key=\"back\">\r\n            <img src={presentImg}/>\r\n      </div>\r\n    </ReactCardFlip>\r\n  );\r\n\r\nexport default Card;","export default __webpack_public_path__ + \"static/media/train.3707fb73.png\";","export default __webpack_public_path__ + \"static/media/soldier.6af9a675.png\";","export default __webpack_public_path__ + \"static/media/tricycle.3b715bae.png\";","export default __webpack_public_path__ + \"static/media/football.2ad6bd52.png\";","export default __webpack_public_path__ + \"static/media/bear.33467377.png\";","export default __webpack_public_path__ + \"static/media/blocks.b91eb89e.png\";","import React, { useState, useEffect } from 'react';\r\nimport Card from './Components/Card/Card';\r\nimport train from './resources/train.png';\r\nimport soldier from './resources/soldier.png';\r\nimport tricycle from './resources/tricycle.png';\r\nimport football from './resources/football.png';\r\nimport bear from './resources/bear.png';\r\nimport blocks from './resources/blocks.png';\r\nimport './main.css';\r\n\r\nconst Board = (props) => {\r\n\r\n    const [isFlipped, setIsFlipped] = useState(Array(12).fill(false));\r\n    const [shuffledCard, setShuffledCard] = useState([0,1,2,3,4,5,0,1,2,3,4,5]);\r\n    const [clickCount, setClickCount] = useState(1);\r\n    const [prevSelectedCard, setPrevSelectedCard] = useState(-1);\r\n    const [prevCardId, setPrevCardId] = useState(-1);\r\n\r\n    const presentImgs = [\r\n        train,\r\n        soldier,\r\n        tricycle,\r\n        football,\r\n        bear,\r\n        blocks\r\n    ];\r\n\r\n    useEffect(() => {\r\n        const sortedCards = shuffledCard.sort(() => Math.random() - 0.5);\r\n        setShuffledCard(sortedCards);\r\n    }, []);\r\n    \r\n    const handleClick = event => {\r\n        event.preventDefault();\r\n        const cardId = event.target.id;\r\n        const newFlipps = isFlipped.slice();\r\n        setPrevSelectedCard(shuffledCard[cardId]);\r\n        setPrevCardId(cardId);\r\n\r\n    if (newFlipps[cardId] === false) {\r\n        newFlipps[cardId] = !newFlipps[cardId];\r\n        setIsFlipped(newFlipps);\r\n        setClickCount(clickCount + 1);\r\n\r\n  \r\n        if (clickCount === 2) {\r\n          setClickCount(1);\r\n          const newCard = shuffledCard[cardId];\r\n          const previousCard = prevSelectedCard;\r\n  \r\n          isCardMatch(previousCard, newCard, prevCardId, cardId);\r\n        }\r\n      }\r\n    };\r\n\r\n    const isCardMatch = (card1, card2, card1Id, card2Id) => {\r\n        if (card1 === card2) {\r\n            const hideCard = shuffledCard.slice();\r\n            hideCard[card1Id] = -1;\r\n            hideCard[card2Id] = -1;\r\n            setTimeout(() => {\r\n                setShuffledCard(hideCard)\r\n            }, 1000);\r\n          } else {\r\n            const flipBack = isFlipped.slice();\r\n            flipBack[card1Id] = false;\r\n            flipBack[card2Id] = false;\r\n            setTimeout(() => {\r\n                setIsFlipped(flipBack)\r\n            }, 1000);\r\n          }\r\n    }\r\n\r\n    if(!isFlipped.every(item => item === true)){\r\n        return (\r\n            <div className=\"grid-container\">\r\n                {shuffledCard.map((cardNumber, index) => \r\n                    <Card\r\n                    key={index} \r\n                    id={index}\r\n                    cardNumber={cardNumber} \r\n                    presentImg={presentImgs[cardNumber]}\r\n                    isFlipped={isFlipped[index]} \r\n                    handleClick={handleClick}\r\n                    />\r\n                )}\r\n            </div>\r\n    );\r\n    } else {\r\n        return (\r\n            <div>\r\n                <h1 className=\"game-complete\">{props.elfName} the Elf, you did it!</h1>\r\n            </div>\r\n        )\r\n\r\n    }\r\n    \r\n}\r\n\r\nexport default Board;","export default __webpack_public_path__ + \"static/media/Snow background.10f0f9c6.png\";","import React, { useState } from 'react';\r\nimport Snowfall from 'react-snowfall';\r\n//import TimerScore from './TimerScore';\r\nimport Board from '../../Board'\r\nimport snow from '../../resources/Snow background.png';\r\n//import {Link} from 'react-router-dom'\r\n\r\nconst Game = (props) => {\r\n     return (\r\n        <div className=\"game\">\r\n            <Snowfall />\r\n            <div className=\"snow-image\">\r\n                <img src={snow}/>\r\n            </div>\r\n            <div className=\"game-board\">\r\n            <Board elfName={props.elfName} />\r\n            </div>\r\n        </div>\r\n     )\r\n}\r\n\r\nexport default Game;","import React, { useState } from 'react';\r\nimport Snowfall from 'react-snowfall';\r\nimport {Link} from 'react-router-dom'\r\nimport Game from './Game';\r\n\r\nconst SantaAppGame = (props) => {\r\n\r\n  const [newGame, setNewGame] = useState(false);\r\n  const [elfName, setElfName ] = useState('');\r\n  const [startGame, setStartGame] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n      setElfName(e.target.value); \r\n    }\r\n\r\n  const handleSubmit = (e) => {\r\n    if(elfName === '') {\r\n      alert('Please enter your Elf Name');\r\n      e.preventDefault();\r\n    } else {\r\n      setNewGame(true)\r\n    }\r\n  }\r\n\r\n  const startTheGame = (e) => {\r\n    setStartGame(true)\r\n  }\r\n\r\n\r\n\r\n  if(newGame && startGame) {\r\n    return <Game elfName={elfName}/>\r\n  } else if (newGame && !startGame) {\r\n    return(\r\n      <div className=\"game-start\">\r\n        <Snowfall />\r\n        <h2>{elfName}, can you match all the presents to help Santa?</h2>\r\n        <button onClick={startTheGame}>Let's Go!</button>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <div className=\"App\">\r\n        <Snowfall />\r\n        <body className=\"App-body\">\r\n          <h1>On no! Santa's sleigh has crashed into the snow!</h1>\r\n          <h2>Can you help him?</h2>\r\n          <form className=\"name-form\" onSubmit={handleSubmit}>\r\n              <h2>Elf Name:</h2>\r\n              <input className=\"elfNameInput\" type=\"text\" onChange={handleChange} value={elfName}/>\r\n              <br/>\r\n              <Button />\r\n          </form>\r\n        </body>\r\n        <div className=\"footer\">\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n  class Button extends React.Component {\r\n    render() {\r\n      return (\r\n        <div>\r\n          <input className=\"button\" type=\"submit\" />\r\n        </div> \r\n      )\r\n    }\r\n  }\r\n\r\nexport default SantaAppGame;","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SantaAppWelcome from './Components/Welcome/SantaAppWelcome';\nimport SantaAppGame from './Components/Game/SantaAppGame';\n\nimport {BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nconst SantaApp = () => { //parent \n\n    return (\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact component={SantaAppWelcome}/>\n          <Route path=\"/game\" component={SantaAppGame}/>\n        </Switch>\n      </Router>\n    )\n}\n\nReactDOM.render(\n  <SantaAppGame />,\n  document.getElementById('root')\n);"],"sourceRoot":""}